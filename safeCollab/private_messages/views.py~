from django.shortcuts import render
from django.template import Context, RequestContext
from django.contrib.auth.models import User
from private_messages.models import Message, ConversationLog
from django.contrib.auth import logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth import logout
from django.contrib.auth import authenticate, login
from django.core.context_processors import csrf
from private_messages.forms import SendMessage, ConversationForm
from django.http import HttpResponse, HttpResponseRedirect
import re

@login_required
def index(request):
	conversations = ConversationLog.objects.all()
	c = Context({'conversations': conversations})
	if request.method == 'POST':
		form = SendMessage(request.POST)
		if form.is_valid():
			send_message = SendMessage(request.POST)
			message_content = send_message.data['content']
			message_sender = request.user
			message = Message(sender=message_sender, content=message_content)
			message.save()
	else:
		form = SendMessage()
	c['form'] = form
	c = RequestContext(request, c)
	return render(request, 'private_messages.html', c)

def getConversation(request, conversationID):
	conversations = ConversationLog.objects.all()
	active_conversation = ConversationLog.objects.get(pk=conversationID)
	c = Context({'conversations': conversations, 'active_conversation': active_conversation})
	if request.method == 'POST':
		form = SendMessage(request.POST)
		if form.is_valid():
			send_message = SendMessage(request.POST)
			message_content = send_message.data['content']
			message_sender = request.user
			message = Message(sender=message_sender, content=message_content)
			message.save()
			active_conversation.log.add(message)
	else:
		form = SendMessage()
	c['form'] = form
	c = RequestContext(request, c)
	return render(request, 'private_messages.html', c)

#@csrf_exempt
def newConversation(request):
	#if request.method == 'POST':
	#	form = 
	#active_conversation = ConversationLog.objects.get(pk=conversationID)
	#c = Context({'conversations': conversations, 'active_conversation':active_conversation})
	if request.method == 'POST':
		conversationForm = ConversationForm()
		#if conversationForm.is_valid():
		new_conversation = ConversationForm(request.POST)
		participants = new_conversation.data['participants']
		log = new_conversation.data['message']
		pattern = re.compile("^\s+|\s*,\s*|\s+$")
		if (participants != "") and (log != ""):
			users = []
			nonexistentusers = []
			for x in pattern.split(participants):
				if x:
					if User.objects.get(username=x):
						users.append(x)
					else:
						nonexistentusers.append(x)
			if len(nonexistentusers) > 0:
				printout = "The following users do not exist: "
				for y in nonexistentusers:
					printout += y
					printout += " "
				printout += ". Please send the message again."
				return HttpResponse(printout)
			else:
				active_conversation = ConversationLog()
				active_conversation.save()
				#userobjects = []
				for x in users:
					active_conversation.participants.add(User.objects.get(username=x))
					#userobjects.append(User.objects.get(username=x))
					#p = "HELLO "
					#p+=str(currentUser)
					#return HttpResponse(p)
					#conversation.participants.add(currentUser)
				
				
				message_sender = request.user
				message = Message(sender=message_sender, content=log)
				message.save()
				active_conversation.log.add(message)
				active_conversation.save()
				
			#return HttpResponse(users[0])
			#return HttpResponse([x for x in users if x])
		else:
			return HttpResponse("One or more of your fields is blank.")
			#return HttpResponse("WOAH")	
		#return HttpResponse(participants)
		#return HttpResponse("WOAH")
	else:
		conversationForm = ConversationForm()
		
		
	return render(request, 'new_conversation.html', {})

#def addConversation(request, conversationID):
#	if request.method == 'POST': 
